import json
from sqlalchemy import *
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

def main():
    readDB()
    return

def readDB():
    try:
        # ver se o ficheiro existe
        try:
            file1 = open('domains.json', 'w')
            #file2 = open('../Analise/ips.json')
        except IOError as e:
            print(e)
        #domains = json.load(file2)
        
        engine = create_engine('mariadb+mariadbconnector://pedropereira:12123@localhost/projeto', echo=False)
        cnn = engine.connect()

        metadata = MetaData()
        cve = Table('CVE', metadata, autoload = True, autoload_with=engine)
        department = Table('Department', metadata, autoload = True, autoload_with=engine)
        domain = Table('Domain', metadata, autoload = True, autoload_with=engine)
        domain_vuln = Table('Domain_Vuln', metadata, autoload = True, autoload_with=engine)
        domain_ports = Table('Domain_Ports', metadata, autoload = True, autoload_with=engine)

        Session = sessionmaker(bind = engine)
        session = Session()

        '''insert = domain.insert().values(IP_address = '192.168.0.6', Domain_name = 'oraboas.ua.pt', FK_Department = 23)
        modify_row = domain.update().where(domain.c.IP_address == '192.168.0.2').values(FK_Department = 4)
        delete = domain.delete().where(domain.c.IP_address == '192.168.0.6')
        cnn.execute(insert/modify_row/delete)

        select = domain.select().where(domain.c.FK_Department == 4)
        result = cnn.execute(select)
        info = result.fetchall()
        print(info)'''

        #delete = cve.delete().where(cve.c.CVSS == 3.5)
        #cnn.execute(delete)
        
        domains = dict()
        select = domain.select()
        result = cnn.execute(select)
        info = result.fetchall()
        for domainInfo in info:
            domains[domainInfo[0]] = dict()
            domains[domainInfo[0]] = domainDict(cnn, session, domain, domain_ports, domain_vuln, cve, domainInfo)
        json.dump(domains, file1, indent = 4)
        
    except FileNotFoundError or ImportError or IndexError as e:
        print(e)

def domainDict(cnn, session, domain, domain_ports, domain_vuln, cve, domainInfo):
    domDict = dict()
    domDict['name'] = domainInfo[1]

    allPortsDict = dict()
    select = domain_ports.select().where(domain_ports.c.FK_Domain == domainInfo[0])
    result = cnn.execute(select)
    portsInfo = result.fetchall()
    for port in portsInfo:
        portDict = dict()
        portDict['type'] = port[2]
        portDict['state'] = port[3]
        portDict['service'] = port[4]
        portDict['version'] = port[5]
        allPortsDict[port[1]] = portDict
    domDict['ports'] = allPortsDict

    cvesInfo = session.query(cve).join(domain_vuln).join(domain
    ).filter(
        domain.c.IP_address == domain_vuln.c.FK_Domain,
    ).filter(
        domain_vuln.c.FK_CVE == cve.c.CVE_id,
    ).all()
    for cve in cvesInfo:
        cveDict = dict()
        cveDict['cvss'] = cve[1]
        cveDict['severity'] = cve[2]
        cveDict['cwe'] = cve[3]
        cveDict['cvss-vector'] = cve[4]

        impactDict = dict()
        impactDict['availability'] = cve[5]
        impactDict['confidentiality'] = cve[6]
        impactDict['integrity'] = cve[7]
        cveDict['impact'] = impactDict

        accessDict = dict()
        accessDict['authentication'] = cve[8]
        accessDict['complexity'] = cve[9]
        accessDict['vector'] = cve[10]
        cveDict['access'] = accessDict

        domDict[cve[0]] = cveDict

    domDict['Rating'] = domainInfo[2]
        
    return domDict

main()