import json
from sqlalchemy import *
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

def updateDB():
    try:
        # ver se o ficheiro existe
        try:
            file1 = open('domains.json')
            #file2 = open('../Analise/ips.json')
        except IOError as e:
            print(e)
        ips = json.load(file1)
        #domains = json.load(file2)
        
        engine = create_engine('mariadb+mariadbconnector://username:password@db:3306/project', echo=False)
        cnn = engine.connect()

        metadata = MetaData()
        cve = Table('CVE', metadata, autoload = True, autoload_with=engine)
        domain = Table('Domain', metadata, autoload = True, autoload_with=engine)
        domain_vuln = Table('Domain_Vuln', metadata, autoload = True, autoload_with=engine)
        domain_ports = Table('Domain_Ports', metadata, autoload = True, autoload_with=engine)

        '''insert = domain.insert().values(IP_address = '192.168.0.6', Domain_name = 'oraboas.ua.pt', FK_Department = 23)
        modify_row = domain.update().where(domain.c.IP_address == '192.168.0.2').values(FK_Department = 4)
        delete = domain.delete().where(domain.c.IP_address == '192.168.0.6')
        cnn.execute(insert/modify_row/delete)

        select = domain.select().where(domain.c.FK_Department == 4)
        result = cnn.execute(select)
        info = result.fetchall()
        print(info)'''

        #delete = cve.delete().where(cve.c.CVSS == 3.5)
        #cnn.execute(delete)

    
        # iterating ips
        for ipkey in ips.keys():
            addtoDomain(domain, cnn, ipkey, ips[ipkey]["name"], ips[ipkey]["Rating"], ips[ipkey]["OS"])
            for key in ips[ipkey]["ports"]["open"].keys():
                addtoDomPorts(domain_ports, cnn, ipkey, key, ips[ipkey]["ports"]["open"][key])
            for key in ips[ipkey].keys():
                if 'CVE' in key:
                    addtoCVE(cve, cnn, key, ips[ipkey][key])
                    addtoDomVuln(domain_vuln, cnn, ipkey, key)
        
    except ImportError or IndexError as e:
        print(e)

def addtoDomVuln(domain_vuln, cnn, ip, cveid):
    select = domain_vuln.select().where(domain_vuln.c.FK_Domain == ip).where(domain_vuln.c.FK_CVE == cveid)
    result = cnn.execute(select)
    info = result.fetchall()
    if(info == []):
        insert = domain_vuln.insert().values(FK_Domain = ip, FK_CVE = cveid, State = 'Not Fixed')
        cnn.execute(insert)
    return

def addtoCVE(cve, cnn, cveid, cveinfo):
    select = cve.select().where(cve.c.CVE_id == cveid)
    result = cnn.execute(select)
    info = result.fetchall()
    if(info == []):
        insert = cve.insert().values(CVE_id = cveid, CVSS = cveinfo['cvss'], Severity = cveinfo['severity'], CWE = cveinfo['cwe'], 
                            CVSS_vector = cveinfo['cvss-vector'], IMP_availability = cveinfo['impact']['availability'], 
                            IMP_confidentiality = cveinfo['impact']['confidentiality'], IMP_integrity = cveinfo['impact']['integrity'],
                            ACC_Auth = cveinfo['access']['authentication'], ACC_complexity = cveinfo['access']['complexity'],
                            ACC_vector = cveinfo['access']['vector'])
        cnn.execute(insert)
    else:
        modify_row = cve.update().where(cve.c.CVE_id == cveid).values(CVE_id = cveid, CVSS = cveinfo['cvss'], Severity = cveinfo['severity'], CWE = cveinfo['cwe'], 
                            CVSS_vector = cveinfo['cvss-vector'], IMP_availability = cveinfo['impact']['availability'], 
                            IMP_confidentiality = cveinfo['impact']['confidentiality'], IMP_integrity = cveinfo['impact']['integrity'],
                            ACC_Auth = cveinfo['access']['authentication'], ACC_complexity = cveinfo['access']['complexity'],
                            ACC_vector = cveinfo['access']['vector'])
        cnn.execute(modify_row)
    return

def addtoDomain(domain, cnn, ip, name, rating, os):
    select = domain.select().where(domain.c.IP_address == ip)
    result = cnn.execute(select)
    info = result.fetchall()
    if(info == []):
        insert = domain.insert().values(IP_address = ip, Domain_name = name, Rating = rating, OS = os)
        cnn.execute(insert)
    else:
        modify_row = domain.update().where(domain.c.IP_address == ip).values(IP_address = ip, Domain_name = name, Rating = rating, OS = os)
        cnn.execute(modify_row)
    return

def addtoDomPorts(domain_ports, cnn, ipkey, portnumber, portInfo):
    select = domain_ports.select().where(domain_ports.c.number == portnumber).where(domain_ports.c.FK_Domain == ipkey)
    result = cnn.execute(select)
    info = result.fetchall()
    if(info == []):
        insert = domain_ports.insert().values(number = portnumber, type = portInfo['type'], state = portInfo['state'],
                            service = portInfo['service'], version = portInfo['version'], FK_Domain = ipkey)
        cnn.execute(insert)
    else:
        modify_row = domain_ports.update().where(domain_ports.c.number == portnumber).where(domain_ports.c.FK_Domain == ipkey).values(number = portnumber, 
                            type = portInfo['type'], state = portInfo['state'], service = portInfo['service'],
                            version = portInfo['version'], FK_Domain = ipkey)
        cnn.execute(modify_row)
    return

updateDB()