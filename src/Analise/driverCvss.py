from datetime import datetime
import requests

class calculate_cvss():
    def remove_older(self, lista):
        """_summary_
            Eliminates the repeted cves and doesnt consider the CVE if its older than the previous CVE
            It goes to a certain point and goes back in time displaying a bunch of CVEs from the past without reason, i've called this a cicle
        Args:
            lista (array of strings): list of CVEs
        Returns: array of CVEs without repetitions and cicles
        """
        
        def get_ano(cve):
            """_summary_
                Gets the year of the CVE
            Args:
                cve (string): CVE to be analysed

            Returns:
                string: year of the CVE
            """
            sep = cve.split('-')
            ano = int(sep[1])
            return ano
        
        if len(lista) < 2:
            return lista 
        arr = list()
        arr.append(lista[0])
        for l in lista[1:]:
            if get_ano(l) < get_ano(arr[-1]):
                break
            arr.append(l)
        return arr
    
    # retorna os CVEs a partir dos resultados da pesquisa
    def get_CVE_from_file(self,filename):
        """_summary_
            From a file which contains the results of the search of the vulnerabilities of a certain ip it gets the CVEs from that file
        Args:
            filename (_type_): results of the search made by the Nmap Vulscan

        Returns:
            array of strings: all the CVEs found in the file 
        """
        with open('%s' % filename, 'r') as file:
            cve_array = list()
            data = file.readlines()
            for d in data:
                keyword = 'CVE'
                if keyword in d:
                    s = d.split(',')
                    cve_array.append(s[0][2:])
                
                    
        cve_array = list(dict.fromkeys(cve_array))
        cve_array = self.remove_older(cve_array)
        file.close()
        return cve_array
    
    def get_info(self,cve):
        """_summary_
            goes to the a website and returns a json file
        Args:
            cve (_type_): CVE to be researched

        Returns:
            _type_: json file with the info from the CVE
        """
        url = 'https://cve.circl.lu/api/cve/' + cve
        r = requests.get(url)
        file = r.json()
        return file
    
    # retorna BaseScore, Severity e o vetor simplificado
    def get_severity(self, cvss):
        """_summary_
            given a certain cvss it returns the severity of such
        Args:
            cvss (_type_): cvss score from the CVE

        Returns:
            _type_: severity of the CVE
        """
        sev = ''
        val = (float)(cvss)
        if val == 0:
            sev = 'None'
        elif val >= 0.1 and val < 4.0:
            sev = 'Low'
        elif val >= 4.0 and val < 7.0:
            sev = 'Medium'
        elif val >= 7.0 and val < 9.0:
            sev = 'High'
        elif val >= 9.0 and val <= 10.0:
            sev = 'Critical'
        else:
            sev = 'N/A'
        return sev
    
    def get_wanted_vals(self, res, json_file, things_to_get, min_sev=0):
        """_summary_
            From all the info of the CVE, it gets only the wanted info
        Args:
            res (dict): dict where we put the info from the CVE
            json_file (_type_): file with all the infromations from the CVE
            things_to_get (_type_): array of the info we want to get from the CVE

        Returns:
            _type_: dict with the wanted info
        """
        for thing in things_to_get:
            try:
                if float(json_file['cvss']) >= float(min_sev):
                    if thing == 'vulnable_product':
                        arr = json_file['thing']
                        res[thing] = list(dict.fromkeys(arr))
                    if thing == 'severity':
                        res[thing] = self.get_severity(json_file['cvss'])
                    else:
                        res[thing] = json_file[thing]
                
            except KeyError as e:
                res[thing] = 'Not found'
                continue
        return res
