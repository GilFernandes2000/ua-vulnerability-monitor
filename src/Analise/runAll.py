import time
import subprocess
import sys
from subprocess import PIPE
import textwrap
import argparse
import os
import json
from unittest.mock import seal
import requests

def parse_args():
    parser = argparse.ArgumentParser(
                                        prog='runAll.py',
                                        formatter_class=argparse.RawDescriptionHelpFormatter,
                                        description=textwrap.dedent('''
                                            ----------------------------                       
                                            |                          | 
                                            |   Vulnerability Scanner  |
                                            |                          | 
                                            ----------------------------
                                            use it only for good purposes
                                            '''))
    parser.add_argument('-d', '--domain', nargs='+' , required=False, help='Target domain')
    parser.add_argument('-o', '--onlyOne', nargs='+', required=False, help='Process only the given ones')
    parser.add_argument('-m', '--minSev', type=float, required=False, help='Minimum severity')
    parser.add_argument('-c', '--cleanJson', nargs='?', type=str, required=False, help='Clean JSON file')
    return parser.parse_args()

def main():
    
    args = parse_args()

    #see if the system has the all dependencies
    try:
        import requests
        import time
        import subprocess
        import sys
        import glob
        
    except ImportError:
        print('not all dependencies are meet')
        print('Install dependencies: pip install -r requirements.txt')
    
    if args.cleanJson:
        os.remove(args.cleanJson)
        contents = dict()
        with open(args.cleanJson, 'w') as json_file:
            json.dump(contents, json_file, indent=4)
    
    if args.onlyOne:
        try:
            os.remove('final_cvss_scores.json')
        except Exception as e:
            print(e)
            
        domains = args.onlyOne
        
        if args.onlyOne != None:
            for domain in domains:
                try:
                    subprocess.run(f'python3 subDomain_search.py -d {domain}', shell=True)
                except subprocess.SubprocessError as e:
                    print(e)
                    continue   
                subprocess.run(f'python3 see_cvss_json.py {domain}', shell=True)
                
        # subprocess.run(f'python3 automatic_report.py', shell=True)
        r = subprocess.Popen("./run.sh", shell=True, stderr=PIPE, universal_newlines=True)
        err = r.communicate()
        print(f'err : {err}')
        print('DONE')
    else:    
        domains = args.domain
        # run the file to get the pool of IPs
        if args.domain != None:
            for domain in domains:
                try:
                    subprocess.run(f'python3 subDomain_search.py -d {domain}', shell=True)
                except subprocess.SubprocessError as e:
                    print(e)
                    continue
                    
            print('IP pool done')
            time.sleep(3)
            print('Starting Analysis...')
            # analise each IP from the pool
            # else:
            with open('ips.json', 'r') as f:
                ips = json.loads(f.read())
                
            for key in ips.keys():
                subprocess.run(f'python3 see_cvss_json.py {ips[key]}', shell=True)
                
        print('Analysis done')
        r = subprocess.Popen("./run.sh", shell=True, stderr=PIPE, universal_newlines=True)
        err = r.communicate()
        print(f'err : {err}')
        

main()