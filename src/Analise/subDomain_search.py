import requests
import urllib3
import argparse
import sys
import socket
import json

def parse_args():
    """ Needed arguments to run the program

    Returns:
        _type_: Return the domain
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--domain', type=str, required=True, help="Target domain")
    return parser.parse_args()

def parse_url(url):
    """Sees if domain exists

    Args:
        url (string): domain

    Returns:
        _type_: return the domain if exists
    """
    try:
        host = urllib3.util.url.parse_url(url).host
    except:
        print('Invalid domain')
        sys.exit(1)
    return host

def add_KV_to_json(filename, key, value):
    try:
        with open(filename) as json_file:
            contents = json.loads(json_file.read())
        
        if key not in contents.keys():
            contents[key] = value
            
            with open(filename, 'w') as json_file:
                json.dump(contents, json_file, indent=4)
            
    except FileNotFoundError:
        contents = dict()
        with open(filename, 'w') as json_file:
            contents[key] = value
            json.dump(contents, json_file, indent=4)

subdomains = []


args = parse_args()
try:
    if(args.domain[0].isdigit() and args.domain[1].isdigit()):
        host = socket.gethostbyaddr(args.domain)
        target = parse_url(host[0])
    else:
        target = parse_url(args.domain)
        print(target)
except Exception as e:
    print(e)    


try:
    #https://crt.sh/atom?q=ua.pt
    req = requests.get(f'https://crt.sh/?q=%.{target}&output=json')
except Exception as e:
    print(e)
    sys.exit(1)

if req.status_code != 200:
    try:
        ip = socket.gethostbyname(target)
        add_KV_to_json('ips.json', target, ip)
    except Exception:
        name = socket.gethostbyaddr(target)
        add_KV_to_json('ips.json', name, target)
    finally:
        print("Information not available")
        sys.exit(1)
else:
    for (key,value) in enumerate(req.json()):
        subdomains.append(value['common_name'])
        
    subs = sorted(set(subdomains))
    for s in subs:
        try:
            ip = socket.gethostbyname(s)
            add_KV_to_json('ips.json', s, ip)
        except socket.gaierror or UnicodeError:
            continue
