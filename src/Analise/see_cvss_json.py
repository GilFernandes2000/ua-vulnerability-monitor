import time
import subprocess
import json
import sys
import socket
import os
from driverCvss import *
from ports_version import info_from_ip


def add_KV_to_json(filename, key, value):
    try:
        filesize = os.path.getsize(filename)
        if filesize == 0:
            contents = dict()
        else:
            with open(filename) as json_file:
                contents = json.loads(json_file.read())

        if key not in contents.keys():
            contents[key] = value

            with open(filename, 'w') as json_file:
                json.dump(contents, json_file, indent=4)

    except FileNotFoundError:
        contents = dict()
        with open(filename, 'w') as json_file:
            contents[key] = value
            json.dump(contents, json_file, indent=4)
            
            
def analise(nome, ip, ip_to_vulns, highCvss=0):
    na = 'N/A'
    r = open('results.txt', 'w')      
    print('Scanning %s' % nome)
    s = subprocess.run(f'nmap -Pn -A --script=vulscan/vulscan.nse --script-args=vulscandb=allitems.csv,vulscanoutput=listid {ip}', stdout=r , shell=True)
    r.close()
    
    # get the info for the cvss
    info = info_from_ip()
    cvss = calculate_cvss()
    array_of_cves = cvss.get_CVE_from_file('results.txt')   # devolve todos os CVEs encotrados no ficheiro
    wanted_vals = ['cvss', 'severity', 'cwe', 'cvss-vector', 'impact', 'access']  # informaÃ§oes sobre o CVE
    wanted_things = dict()
    ip_to_vulns[ip] = dict()
    ip_to_vulns[ip]['name'] = nome
    ip_to_vulns[ip]['ports'] = info.port_info()
    ip_to_vulns[ip]['OS'] = info.os_info()
    ip_to_vulns[ip]['Route'] = info.routes()
    
    # associate vals to cve
    for cve in array_of_cves:
        ip_to_vulns[ip][cve] = dict()
        file_json = cvss.get_info(cve)
        
        wanted_things = cvss.get_wanted_vals(wanted_things, file_json, wanted_vals) 
            
        if file_json == None:
            for val in wanted_vals:
                ip_to_vulns[ip][cve] = na
        else:
            ip_to_vulns[ip][cve].update(wanted_things)
            if ip_to_vulns[ip][cve]['cvss'] > highCvss:
                highCvss = ip_to_vulns[ip][cve]['cvss']
            
        if ip_to_vulns[ip][cve] == {}:
            del ip_to_vulns[ip][cve]
        else:
            print(cve)
    ip_to_vulns[ip]['Rating'] = round(highCvss, 1)   
    r.close()
    del array_of_cves
    add_KV_to_json('final_cvss_scores.json', ip, ip_to_vulns[ip])
    
    
def main():
    try:
        #passar argumentos
        # ver se o ficheiro existe
        try:
            with open('ips.json') as f:
                ips = json.loads(f.read())
                
        except FileNotFoundError as e:
            ips = {}
        
        ip_to_vulns = dict()
        try:
            trace = dict()
            if sys.argv[1][-1].isdigit():
                
                if sys.argv[1] in ips.keys():
                    nome = list(ips.keys())[list(ips.values()).index(sys.argv[1])]
                    analise(nome, sys.argv[1], ip_to_vulns)
                else:
                    analise(socket.gethostbyaddr(sys.argv[1]), sys.argv[1], ip_to_vulns)
            else:
                if sys.argv[1] in ips.values():
                    ip = ips[sys.argv[1]]
                    analise(sys.argv[1], ip, ip_to_vulns)
                else:
                    analise(sys.argv[1], socket.gethostbyname(sys.argv[1]), ip_to_vulns)
            
        except Exception as e:
            print(e)
    except FileNotFoundError or ImportError or IndexError as e:
        print(e)

main()
