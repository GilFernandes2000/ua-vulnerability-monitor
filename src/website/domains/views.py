from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
import json
import subprocess
import markdown
import json
from xhtml2pdf import pisa
from sqlalchemy import *
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from uavm.tasks import analiseOne

def html_2_pdf(in_html):
    res_file = open('templates/static/assets/ipreport.pdf', 'w+b')
    pisa_stats = pisa.CreatePDF(in_html, dest=res_file)
    res_file.close()
    
    return pisa_stats.err

def html_report(ip):

    engine = create_engine('mariadb+mariadbconnector://username:password@db:3306/project', echo=False)
    cnn = engine.connect()

    metadata = MetaData()
    cve = Table('CVE', metadata, autoload = True, autoload_with=engine)
    domain = Table('Domain', metadata, autoload = True, autoload_with=engine)
    domain_vuln = Table('Domain_Vuln', metadata, autoload = True, autoload_with=engine)
    domain_ports = Table('Domain_Ports', metadata, autoload = True, autoload_with=engine)

    select = domain.select().where(domain.c.IP_address == ip)
    result = cnn.execute(select)
    info = result.fetchall()
    ipinfo = dict(zip(result.keys(), info[0]))

    select = domain_ports.select().where(domain_ports.c.FK_Domain == ip)
    result = cnn.execute(select)
    info = result.fetchall()
    portsdict = dict()
    for porttuple in info:
        portdict = dict(zip(result.keys(), porttuple))
        del portdict["id"]
        del portdict["FK_Domain"]
        portsdict[porttuple[1]] = portdict
    openports = dict()
    openports['open'] = portsdict
    ipinfo['ports'] = openports

    select = domain_vuln.select().where(domain_vuln.c.FK_Domain == ip)
    result = cnn.execute(select)
    info = result.fetchall()

    for dom_vuln in info:
        select = cve.select().where(cve.c.CVE_id == dom_vuln[1])
        result = cnn.execute(select)
        cveinfo = result.fetchall()
        ipinfo[dom_vuln[1]] = dict(zip(result.keys(), cveinfo[0]))

    with open('templates/static/assets/relatorio.md', 'bw+') as f:
        f.write('<head>'.encode('utf-8'))
        f.write('<style>'.encode('utf-8'))
        f.write('h1 {text-align: center;}'.encode('utf-8'))
        f.write('</style>'.encode('utf-8'))
        f.write('</head>'.encode('utf-8'))
        f.write('<body>'.encode('utf-8'))
        f.write('<h1>Vulnerability Report</h1>'.encode('utf-8'))
        f.write('<h2>{}</h2>'.format(ip).encode('utf-8'))
        for cve in ipinfo:
            if 'CVE' in cve:
                f.write('<h3>{}</h3>\n'.format(cve).encode('utf-8'))
                for info, thing in ipinfo[cve].items():
                    f.write('<b>{}</b>: {}</br>'.format(info, thing).encode('utf-8'))
                    
            elif 'ports' in cve:
                f.write('<h3>{}</h3>\n'.format(cve).encode('utf-8'))
                for port in ipinfo[cve]:
                    if 'Filtered' in port:
                        f.write('<b>{}</b>: {}</br>'.format(port, ipinfo[cve][port]).encode('utf-8'))
                        f.write('</br>'.encode('utf-8'))
                    else:
                        f.write('<b>{}</b> </br>'.format(port).encode('utf-8'))
                        f.write('</br>'.encode('utf-8'))
                        for num in ipinfo[cve][port]:
                            f.write('<b>{}</b> </br>'.format(num, ipinfo[cve][port][num]).encode('utf-8'))
                            for tp in ipinfo[cve][port][num]:
                                f.write('\t<b>{}</b>: {}</br>'.format(tp, ipinfo[cve][port][num][tp]).encode('utf-8'))
                            f.write('</br>'.encode('utf-8'))
            else:
                f.write('<b>{}</b>: {}</br>'.format(cve, ipinfo[cve]).encode('utf-8'))
                # for thing in ipinfo[ip][cve][str(info)]:
                #     f.write('#### {}\n'.format(thing).encode('utf-8'))
        f.write('\n'.encode('utf-8'))
        f.write('</body>'.encode('utf-8'))
        f.seek(0)
        
        markdown.markdownFromFile(input=f, output='templates/static/assets/report.html')

def report():
    in_html = open('templates/static/assets/report.html', 'r')
    pisa.showLogging()
    html_2_pdf(in_html)
    in_html.close()
    return

@login_required(login_url='/login/')
def domain(request):
    context = {}
    newips = {}
    piechart = {}
    piechart['low'] = 0
    piechart['medium'] = 0
    piechart['high'] = 0
    piechart['critical'] = 0
    totalcves = 0

    ip = request.POST.get('domainButton', None)
    if ip == None:
        analisetxt = request.POST.get('analise', None)
        if analisetxt != None:
            y = analisetxt.split(',')
            domain = y[0]
            ip = y[1]
            analiseindividual(domain)
        else:
            reportip = request.POST.get('reportButton', None)
            if reportip != None:
                html_report(reportip)
                report()
                return redirect('/static/assets/ipreport.pdf')
            else:
                fixcvetxt = request.POST.get('fixstatus', None)
                if fixcvetxt != None:
                    y = fixcvetxt.split(',')
                    newstatus = y[0]
                    cveid = y[1]
                    ip = y[2]
                    change_cve_status(ip, cveid, newstatus)
                else:
                    return redirect('/dashboard/')

###############################

    engine = create_engine('mariadb+mariadbconnector://username:password@db:3306/project', echo=False)
    cnn = engine.connect()

    metadata = MetaData()
    cve = Table('CVE', metadata, autoload = True, autoload_with=engine)
    domain = Table('Domain', metadata, autoload = True, autoload_with=engine)
    domain_vuln = Table('Domain_Vuln', metadata, autoload = True, autoload_with=engine)
    domain_ports = Table('Domain_Ports', metadata, autoload = True, autoload_with=engine)
    users = Table('Users', metadata, autoload = True, autoload_with=engine)
    domain_users = Table('Domain_Users', metadata, autoload = True, autoload_with=engine)

    x = str(request.user)
    select = users.select().where(users.c.Username == x)
    result = cnn.execute(select)
    info = result.fetchall()
    role = info[0][2]

    if role != 'admin':
        select = domain_users.select().where(domain_users.c.FK_Users == x).where(domain_users.c.FK_Domain == ip).where(domain_users.c.State == 'Active')
        usersdomainsresult = cnn.execute(select)
        usersdomains = usersdomainsresult.fetchall()
        if usersdomains == []:
            return redirect('/dashboard/')

    select = domain.select().where(domain.c.IP_address == ip)
    result = cnn.execute(select)
    info = result.fetchall()
    
    ipinfo = dict(zip(result.keys(), info[0]))
    ipinfo['ip'] = ip

    select = domain_ports.select().where(domain_ports.c.FK_Domain == ip)
    result = cnn.execute(select)
    info = result.fetchall()
    portsdict = dict()
    for porttuple in info:
        portsdict[porttuple[1]] = dict(zip(result.keys(), porttuple))
    openports = dict()
    openports['open'] = portsdict
    ipinfo['ports'] = openports

    select = domain_vuln.select().where(domain_vuln.c.FK_Domain == ip)
    result = cnn.execute(select)
    info = result.fetchall()

    for dom_vuln in info:
        select = cve.select().where(cve.c.CVE_id == dom_vuln[1])
        result = cnn.execute(select)
        cveinfo = result.fetchall()
        ipinfo[dom_vuln[1]] = dict(zip(result.keys(), cveinfo[0]))
        ipinfo[dom_vuln[1]]['State'] = dom_vuln[2]

#####################

    for key in ipinfo:
        if 'CVE' in key and ipinfo[key]['State'] == 'Not Fixed':
            severity = ipinfo[key]['Severity']
            totalcves += 1
            if severity == "Low":
                piechart['low'] += 1
            elif severity == "Medium":
                piechart['medium'] += 1
            elif severity == "High":
                piechart['high'] += 1
            elif severity == "Critical":
                piechart['critical'] += 1
    newkey = 'IP_' + ip.replace('.', '_')
    context['domain'] = ipinfo
    if totalcves != 0:
        piechart['low'] = round((piechart['low'] / totalcves) * 100,2)
        piechart['medium'] = round((piechart['medium'] / totalcves) * 100,2)
        piechart['high'] = round((piechart['high'] / totalcves) * 100,2)
        piechart['critical'] = round((piechart['critical'] / totalcves) * 100,2)
    context['piechart'] = piechart
    return render(request, 'machine.html', context)

def analiseindividual(domainName):
    try:
        analiseOne.delay(domainName)
        return 0
    except Exception as e:
        print(e)
        print("\nNao funcionou\n")
        return 0

def change_cve_status(ip, cveid, newstatus):
    engine = create_engine('mariadb+mariadbconnector://username:password@db:3306/project', echo=False)
    cnn = engine.connect()

    metadata = MetaData()
    domain_vuln = Table('Domain_Vuln', metadata, autoload = True, autoload_with=engine)

    select = domain_vuln.select().where(domain_vuln.c.FK_Domain == ip).where(domain_vuln.c.FK_CVE == cveid)
    result = cnn.execute(select)
    info = result.fetchall()

    if info != []:
        currentstatus = info[0][2]
        if newstatus == 'fix':
            newstatus = 'Fixed'
        else:
            newstatus = 'Not Fixed'
        if newstatus != currentstatus:
            print('success')
            modify_row = domain_vuln.update().where(domain_vuln.c.FK_Domain == ip).where(domain_vuln.c.FK_CVE == cveid).values(State = newstatus)
            cnn.execute(modify_row)
    else:
        print('doesnt exist')

        
