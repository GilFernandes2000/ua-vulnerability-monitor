from django.shortcuts import render
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
import json
import requests
from sqlalchemy import *
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
import subprocess
import send_email
from uavm.tasks import analiseOne

@login_required(login_url='/login/')
def dashboard(request):
    context = {}
    context['role'] = 'admin'
    barchartnumCves = {}
    barchartnames = {}
    barchart = {}
    piechart = {}
    piechart['undefined'] = 0
    piechart['low'] = 0
    piechart['medium'] = 0
    piechart['high'] = 0
    piechart['critical'] = 0
    totaldomains = 0

    txt = request.POST.get('analise', None)
    if txt != None:
        domains = txt.replace(",", " ")
        analisegeral(domains)

    engine = create_engine('mariadb+mariadbconnector://username:password@db:3306/project', echo=False)
    cnn = engine.connect()

    metadata = MetaData()
    cve = Table('CVE', metadata, autoload = True, autoload_with=engine)
    domain = Table('Domain', metadata, autoload = True, autoload_with=engine)
    domain_vuln = Table('Domain_Vuln', metadata, autoload = True, autoload_with=engine)
    domain_ports = Table('Domain_Ports', metadata, autoload = True, autoload_with=engine)
    users = Table('Users', metadata, autoload = True, autoload_with=engine)
    domain_users = Table('Domain_Users', metadata, autoload = True, autoload_with=engine)

    ips = dict()

    x = str(request.user)
    select = users.select().where(users.c.Username == x)
    result = cnn.execute(select)
    info = result.fetchall()
    role = info[0][2]

    select = domain.select().where()
    result = cnn.execute(select)
    info = result.fetchall()

    if role != 'admin':
        context['role'] = 'user'
        select = domain_users.select().where(domain_users.c.FK_Users == x)
        usersdomainsresult = cnn.execute(select)
        usersdomains = usersdomainsresult.fetchall()
        tempinfo = []
        for usersdomainstuple in usersdomains:
            for infotuple in info:
                if usersdomainstuple[0] == infotuple[0]:
                    tempinfo.append(infotuple)
        info = tempinfo

    for iptuple in info:
        ipinfo = dict(zip(result.keys(), iptuple))
        ipinfo['ip'] = iptuple[0]
        newkey = 'IP_' + iptuple[0].replace('.', '_')
        
        select = domain_users.select().where(domain_users.c.FK_Users == x).where(domain_users.c.FK_Domain == ipinfo['ip']).where(domain_users.c.State == 'Active')
        usersdomainsresult = cnn.execute(select)
        usersdomains = usersdomainsresult.fetchall()

        if usersdomains == [] and role != 'admin':
            continue

        select = domain_ports.select().where(domain_ports.c.FK_Domain == iptuple[0])
        portresult = cnn.execute(select)
        portinfo = portresult.fetchall()
        portsdict = dict()
        for porttuple in portinfo:
            portsdict[porttuple[1]] = dict(zip(portresult.keys(), porttuple))
        openports = dict()
        openports['open'] = portsdict
        ipinfo['ports'] = openports

        select = domain_vuln.select().where(domain_vuln.c.FK_Domain == iptuple[0])
        dom_vulnresult = cnn.execute(select)
        allcvesinfo = dom_vulnresult.fetchall()

        for dom_vuln in allcvesinfo:
            select = cve.select().where(cve.c.CVE_id == dom_vuln[1])
            cveresult = cnn.execute(select)
            cveinfo = cveresult.fetchall()
            ipinfo[dom_vuln[1]] = dict(zip(cveresult.keys(), cveinfo[0]))

        numCves = 0
        for infokey in ipinfo.keys():
            if 'CVE' in infokey:
                numCves += 1
        
        barchartnames[ipinfo['ip']] = ipinfo['Domain_name']
        barchartnumCves[ipinfo['ip']] = numCves

        rating = ipinfo['Rating']
        totaldomains += 1
        if rating == 0:
            piechart['undefined'] += 1
        elif rating >= 0.1 and rating < 4.0:
            piechart['low'] += 1
        elif rating >= 4.0 and rating < 7.0:
            piechart['medium'] += 1
        elif rating >= 7.0 and rating < 9.0:
            piechart['high'] += 1
        elif rating >= 9.0 and rating <= 10.0:
            piechart['critical'] += 1

        ips[newkey] = ipinfo
    
    context['domains'] = ips

    barchart['numCves'] = barchartnumCves
    barchart['names'] = barchartnames
    context['barchart'] = barchart
    
    if totaldomains != 0:
        piechart['undefined'] = round((piechart['undefined'] / totaldomains) * 100,2)
        piechart['low'] = round((piechart['low'] / totaldomains) * 100,2)
        piechart['medium'] = round((piechart['medium'] / totaldomains) * 100,2)
        piechart['high'] = round((piechart['high'] / totaldomains) * 100,2)
        piechart['critical'] = round((piechart['critical'] / totaldomains) * 100,2)
        context['piechart'] = piechart

    return render(request, 'index.html', context)

def analisegeral(domains):

    try:
        print(domains)
        domainlist = domains.split(' ')
        for d in domainlist:
            analiseOne.delay(d)
        return 0
    except Exception as e:
        print(e)
        print("\nNao funcionou\n")
        return 0